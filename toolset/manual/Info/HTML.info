@FILES
  ["lp"; "The LP Module";]
  ["sym-rel"; "The SymRel Module";]
  ["auxiliary-subsect"; "Auxiliary Functions";
    @SECTION "Auxiliary Functions" [
       @FILE "string-aux"
       @FILE "list-aux"
    ]
  ]
  ["dfa"; "The DFA Module";]
  ["top-level-subsect"; "Top-level Environment";
    @SECTION "Top-level Environment" [
      @SECTION "Version" []
      @SECTION "Parameters" []
      @SECTION "Debugging" []
      @SECTION "Using Files" []
      @SECTION "Basic Types" []
      @SECTION "Conversions Between Basic Types and Strings" []
      @SECTION "Regular Expressions" []
      @SECTION "Labeled Paths" []
      @SECTION "Finite Automata" []
      @SECTION "Injections and Projections Between Finite Automata" []
      @SECTION "Conversions Between Finite Automata" []
      @SECTION "Conversions Between Finite Automata and Regular Expressions" []
      @SECTION "Regular Expression Finite Automata" []
      @SECTION "Parse Trees" []
      @SECTION "Grammars" []
      @SECTION "Programs" []
    ]
  ]
  ["index"; "Forlan Manual";
    @SECTION "Introduction" []
    @SECTION "Loading SML Files, and Forlan Input/Output" []
    @SECTION "Modules" [
       @FILE "auxiliary-subsect"
       @FILE "utility-subsect"
       @FILE "sort-set-rel-tab-subsect"
       @FILE "lex-subsect"
       @FILE "sym-str-subsect"
       @FILE "reg-fa-subsect"
       @FILE "gram-subsect"
       @FILE "prog-subsect"
    ]
    @SECTION "Top-level Environment" [
       @FILE "top-level-subsect"
    ]
  ]
  ["tab"; "The Tab Module";]
  ["sort"; "The Sort Module";]
  ["list-aux"; "The ListAux Module";]
  ["params"; "The Params Module";]
  ["prod"; "The Prod Module";]
  ["tran-set"; "The TranSet Module";]
  ["messages"; "The Messages Module";]
  ["lex"; "The Lex Module";]
  ["tran"; "The Tran Module";]
  ["rfa"; "The RFA Module";]
  ["nfa"; "The NFA Module";]
  ["str-set"; "The StrSet Module";]
  ["gram"; "The Gram Module";]
  ["lex-subsect"; "Lexical Analysis";
    @SECTION "Lexical Analysis" [
       @FILE "lex"
    ]
  ]
  ["var-set"; "The VarSet Module";]
  ["pt"; "The PT Module";]
  ["set"; "The Set Module";]
  ["sym"; "The Sym Module";]
  ["fa"; "The FA Module";]
  ["efa"; "The EFA Module";]
  ["prod-set"; "The ProdSet Module";]
  ["pp"; "The PP Module";]
  ["prog"; "The Prog Module";]
  ["string-aux"; "The StringAux Module";]
  ["str"; "The Str Module";]
  ["tran-reg"; "The TranReg Module";]
  ["use"; "The Use Module";]
  ["rel"; "The Rel Module";]
  ["sort-set-rel-tab-subsect"; "Sorting, Sets, Relations and Tables";
    @SECTION "Sorting, Sets, Relations and Tables" [
       @FILE "sort"
       @FILE "set"
       @FILE "rel"
       @FILE "tab"
    ]
  ]
  ["prog-subsect"; "Programs";
    @SECTION "Programs" [
       @FILE "var"
       @FILE "var-set"
       @FILE "prog"
    ]
  ]
  ["reg"; "The Reg Module";]
  ["gram-subsect"; "Grammars";
    @SECTION "Grammars" [
       @FILE "pt"
       @FILE "prod"
       @FILE "prod-set"
       @FILE "gram"
    ]
  ]
  ["version"; "The Version Module";]
  ["utility-subsect"; "Utilities";
    @SECTION "Utilities" [
       @FILE "version"
       @FILE "params"
       @FILE "pp"
       @FILE "messages"
       @FILE "use"
       @FILE "debug"
       @FILE "system"
    ]
  ]
  ["debug"; "The Debug Module";]
  ["sym-set"; "The SymSet Module";]
  ["reg-fa-subsect"; "Regular Expressions and Finite Automata";
    @SECTION "Regular Expressions and Finite Automata" [
       @FILE "reg"
       @FILE "lp"
       @FILE "tran"
       @FILE "tran-set"
       @FILE "fa"
       @FILE "efa"
       @FILE "nfa"
       @FILE "dfa"
       @FILE "tran-reg"
       @FILE "tran-reg-set"
       @FILE "rfa"
    ]
  ]
  ["tran-reg-set"; "The TranRegSet Module";]
  ["sym-str-subsect"; "Symbols and Strings";
    @SECTION "Symbols and Strings" [
       @FILE "sym"
       @FILE "str"
       @FILE "sym-set"
       @FILE "str-set"
       @FILE "sym-rel"
    ]
  ]
  ["system"; "The System Module";]
  ["var"; "The Var Module";]
@SIGNATURE LP "lp" [
  @TYPES 
    @TYPE lp
    @TYPE pumping_division
    @DATATYPE concr [ Sym Cons]
  @VALS 
    toConcr
    strsOfValidPumpingDivision
    toPP
    output
    sym
    toString
    fromString
    cons
    pumpValidPumpingDivision
    fromConcr
    equal
    startState
    validPumpingDivision
    findValidPumpingDivisionOpt
    compare
    length
    splitAt
    join
    input
    checkPumpingDivision
    label
    findValidPumpingDivision
    endState
]
@SIGNATURE SET "set" [
  @TYPES 
    @TYPE set
  @VALS 
    genTimes
    partition
    inter
    position
    toList
    map
    subset
    memb
    genInter
    compareList
    isNonEmpty
    exists
    all
    genUnion
    hd
    empty
    equal
    minus
    fromList
    times3
    compare
    union
    mapFromList
    times
    filter
    mapToList
    comparePair
    size
    compareTriple
    tl
    isEmpty
    sing
]
@SIGNATURE TRAN_SET "tran-set" [
  @VALS 
    genUnion
    toPP
    output
    toString
    fromString
    inter
    equal
    minus
    fromList
    map
    subset
    memb
    compare
    union
    mapFromList
    genInter
    inputFromLabToks
    input
]
@SIGNATURE SYM "sym" [
  @TYPES 
    @TYPE sym
    @DATATYPE top [ Basic Compound]
    @TYPE basic
  @VALS 
    toPP
    output
    toString
    toTop
    basicToChar
    fromString
    fromTop
    equal
    compare
    jforlanValidate
    inputFromLabToks
    charToBasic
    input
    size
    jforlanPretty
]
@SIGNATURE TRAN_REG_SET "tran-reg-set" [
  @VALS 
    genUnion
    toPP
    output
    toString
    fromString
    inter
    equal
    minus
    fromList
    map
    subset
    memb
    compare
    union
    mapFromList
    genInter
    inputFromLabToks
    input
]
@SIGNATURE EFA "efa" [
  @TYPES 
    @TYPE efa
  @VALS 
    isomorphic
    emptyStr
    closure
    findIsomorphism
    transitions
    findIsomorphismOpt
    output
    toString
    renameStatesCanonically
    isomorphism
    inter
    renameAlphabet
    emptyCloseBackwards
    processStr
    transitionFun
    startState
    acceptingStates
    rev
    reachify
    reachified
    emptySet
    injToFA
    genInter
    emptyClose
    findAcceptingLPOpt
    input
    concat
    findLPOpt
    states
    accepted
    genUnion
    toPP
    projFromFA
    fromString
    prefix
    simplify
    simplified
    genConcat
    equal
    valid
    transitionFunBackwards
    checkLP
    compare
    fromSym
    union
    renameStates
    sub
    numStates
    validLP
    findLP
    fromFA
    alphabet
    findAcceptingLP
    numTransitions
]
@SIGNATURE STR_SET "str-set" [
  @VALS 
    substrings
    genUnion
    toPP
    output
    toString
    power
    fromString
    suffixes
    substring
    inter
    prefix
    suffix
    renameAlphabet
    equal
    minus
    fromList
    map
    rev
    subset
    memb
    compare
    union
    mapFromList
    prefixes
    genInter
    inputFromLabToks
    alphabet
    input
    concat
]
@SIGNATURE STR "str" [
  @TYPES 
    @TYPE str
  @VALS 
    substr
    removePrefix
    allButLast
    toPP
    output
    removeSuffix
    toString
    power
    fromString
    prefix
    renameAlphabet
    suffix
    equal
    compare
    jforlanValidate
    possBeginsWithStr
    inputFromLabToks
    last
    alphabet
    input
    jforlanPretty
]
@SIGNATURE SORT "sort" [
  @TYPES 
    @TYPE total_ordering
  @VALS 
    merge
    sorted
    insert
    equal
    lessEqual
    sort
    less
]
@SIGNATURE PARAMS "params" [
  @VALS 
    getSearchPath
    setPrintingDataStructureDepth
    setCompilationManagerVerbosity
    getPrintingDataStructureDepth
    getWorkingDirectory
    setPrintingStringSize
    setTrackExceptions
    setSearchPath
    getPrintingLineLength
    setPrintingListLength
    setWorkingDirectory
    getTrackExceptions
    setPrintingOfGarbageCollectionMessages
    setPrintingLineLength
    getPrintingListLength
    getPrintingStringSize
    getCompilationManagerVerbosity
]
@SIGNATURE USE "use" [
  @VALS 
    use
]
@SIGNATURE PROD "prod" [
  @TYPES 
    @TYPE prod
  @VALS 
    equal
    compare
]
@SIGNATURE REL "rel" [
  @TYPES 
    @TYPE rel
  @VALS 
    symmetric
    functionFromTo
    injection
    inverse
    bijectionFromTo
    bijectionFromAvoiding
    relationFromTo
    function
    restrictFunction
    transitiveSymmetricClosure
    relationOn
    domain
    mlFunctionToFunction
    range
    transitive
    bijectionFromSupersetAvoiding
    transitiveClosure
    compose
    reflexiveClosure
    symmetricClosure
    antisymmetric
    apply
    reflexive
    applyFunction
    reflexiveTransitiveSymmetricClosure
    updateFunction
    total
    reflexiveTransitiveClosure
]
@SIGNATURE MESSAGES "messages" [
  @EXCEPTIONS 
    CannotHappen
    Error
  @VALS 
    cannotHappen
    messagePP
    messageString
    errorString
    quiet
    errorPP
]
@SIGNATURE REG "reg" [
  @TYPES 
    @TYPE cc
    @TYPE reg
    @DATATYPE concr [ EmptyStr EmptySet Sym Closure Concat Union]
  @VALS 
    sortUnions
    compareCC
    unionCC
    validLeafPath
    split
    obviousSubset
    output
    isUnion
    toString
    isEmptySet
    jforlanEdit
    allSym
    weaklySimplify
    select
    isConcat
    isClosure
    isSym
    compareComplexityTotal
    emptySet
    concatsToList
    fromStr
    toConcr
    height
    weaklySimplified
    toPP
    locallySimplifyTrace
    succCC
    prefix
    standardized
    singCC
    localSimplificationRelations
    equal
    fromStrSet
    allStr
    compare
    union
    fromSym
    rightUnion
    locallySimplified
    inputFromLabToks
    size
    globallySimplifyTrace
    emptyStr
    closure
    globallySimplified
    numSyms
    hasEmp
    numConcats
    validPath
    renameAlphabet
    fromConcr
    isEmptyStr
    rev
    hasSym
    update
    compareComplexity
    input
    concat
    rightConcat
    toStrSetOpt
    numLeaves
    globallySimplify
    maximumLengthPath
    cc
    genUnion
    power
    fromString
    jforlanNew
    unionsToList
    genConcat
    toStrSet
    locallySimplify
    jforlanValidate
    ccToList
    alphabet
    jforlanPretty
]
@SIGNATURE TRAN_REG "tran-reg" [
  @TYPES 
    @TYPE tran_reg
  @VALS 
    equal
    compare
]
@SIGNATURE VERSION "version" [
  @VALS 
    getVersion
]
@SIGNATURE PROD_SET "prod-set" [
  @VALS 
    genUnion
    toPP
    output
    toString
    fromString
    inter
    equal
    minus
    fromList
    map
    subset
    memb
    compare
    union
    mapFromList
    genInter
    inputFromLabToks
    input
]
@SIGNATURE TRAN "tran" [
  @TYPES 
    @TYPE tran
  @VALS 
    equal
    compare
]
@SIGNATURE DEBUG "debug" [
  @VALS 
    debug
]
@SIGNATURE SYM_REL "sym-rel" [
  @TYPES 
    @TYPE sym_rel
  @VALS 
    functionFromTo
    inverse
    output
    toString
    restrictFunction
    inter
    function
    relationOn
    map
    domain
    bijectionFromSupersetAvoiding
    subset
    memb
    genInter
    input
    applyFunction
    updateFunction
    symmetric
    injection
    toPP
    genUnion
    bijectionFromTo
    bijectionFromAvoiding
    fromString
    relationFromTo
    transitiveSymmetricClosure
    equal
    minus
    mlFunctionToFunction
    fromList
    range
    transitive
    compose
    transitiveClosure
    reflexiveClosure
    union
    compare
    symmetricClosure
    mapFromList
    antisymmetric
    comparePair
    inputFromLabToks
    reflexive
    apply
    reflexiveTransitiveSymmetricClosure
    reflexiveTransitiveClosure
    total
    makeBijectionFromAvoiding
]
@SIGNATURE STRING_AUX "string-aux" [
  @VALS 
    removeWhiteSpace
]
@SIGNATURE VAR "var" [
  @TYPES 
    @TYPE var
  @VALS 
    beginsWithVar
    toPP
    output
    toString
    fromString
    equal
    compare
    inputLabFromLabToks
    input
]
@SIGNATURE GRAM "gram" [
  @TYPES 
    @TYPE concr
    @TYPE gram
  @VALS 
    eliminateVariableConstraintsOpt
    findIsomorphism
    output
    renameVariables
    toString
    inter
    productions
    parse
    eliminateEmptyAndUnitProductions
    restartOpt
    reachableFromBackwards
    reachify
    generatedFromVariable
    inChomskyNormalForm
    reachified
    startVariable
    checkPT
    eliminateVariableOpt
    emptySet
    hasNoEmptyProductions
    eliminateVariable
    fromStr
    reachableFrom
    toConcr
    chomskyNormalForm
    toPP
    nullableVariables
    fromReg
    parseAlphabet
    parseAlphabetFromVariable
    prefix
    simplified
    eliminateVariableConstraints
    minus
    equal
    fromStrSet
    valid
    compare
    fromSym
    union
    numProductions
    hasNoEmptyOrUnitProductions
    isomorphic
    parsable
    emptyStr
    variables
    closure
    findIsomorphismOpt
    parseAlphabetFromVariableOpt
    numVariables
    parseAlphabetOpt
    isomorphism
    renameAlphabet
    renameVariablesCanonically
    fromConcr
    rev
    input
    concat
    toStrSetOpt
    eliminateEmptyProductions
    generated
    genUnion
    validPT
    fromString
    simplify
    restart
    parseOpt
    genConcat
    toStrSet
    sub
    fromFA
    alphabet
]
@SIGNATURE PT "pt" [
  @TYPES 
    @TYPE pt
    @TYPE pumping_division
    @DATATYPE concr [ Node]
  @VALS 
    validLeafPath
    output
    toString
    jforlanEdit
    cons
    selectPT
    validPath
    pumpValidPumpingDivision
    fromConcr
    findValidPumpingDivisionOpt
    update
    leaf
    input
    findValidPumpingDivision
    numLeaves
    toConcr
    height
    maximumLengthPath
    strsOfValidPumpingDivision
    toPP
    decons
    fromString
    jforlanNew
    yield
    equal
    validPumpingDivision
    compare
    jforlanValidate
    size
    checkPumpingDivision
    rootLabel
    jforlanPretty
]
@SIGNATURE SYM_SET "sym-set" [
  @VALS 
    genUnion
    toPP
    output
    toString
    fromString
    inter
    equal
    minus
    fromList
    map
    subset
    memb
    compare
    union
    mapFromList
    genInter
    inputFromLabToks
    input
]
@SIGNATURE FA "fa" [
  @TYPES 
    @TYPE fa
    @TYPE concr
  @VALS 
    isomorphic
    emptyStr
    closure
    findIsomorphism
    transitions
    findIsomorphismOpt
    output
    toString
    renameStatesCanonically
    jforlanEdit
    isomorphism
    renameAlphabet
    emptyCloseBackwards
    processStr
    fromConcr
    transitionFun
    startState
    acceptingStates
    rev
    reachify
    reachified
    emptySet
    emptyClose
    findAcceptingLPOpt
    input
    concat
    findLPOpt
    states
    fromStr
    accepted
    toConcr
    toPP
    genUnion
    fromReg
    fromString
    simplify
    simplified
    jforlanNew
    genConcat
    equal
    valid
    transitionFunBackwards
    checkLP
    compare
    fromSym
    union
    renameStates
    sub
    numStates
    validLP
    jforlanValidate
    findLP
    alphabet
    findAcceptingLP
    numTransitions
    jforlanPretty
]
@SIGNATURE DFA "dfa" [
  @TYPES 
    @TYPE dfa
    @DATATYPE relationship [ Equal ProperSub ProperSup Incomp]
  @VALS 
    isomorphic
    emptyStr
    determSimplified
    findIsomorphism
    transitions
    findIsomorphismOpt
    output
    toString
    renameStatesCanonically
    isomorphism
    inter
    renameAlphabet
    injToNFA
    processStr
    transitionFun
    startState
    acceptingStates
    reachify
    subset
    determSimplify
    reachified
    projFromNFA
    emptySet
    injToFA
    projFromEFA
    genInter
    injToEFA
    findAcceptingLPOpt
    input
    complement
    minimize
    states
    findLPOpt
    accepted
    determAccepted
    relation
    toPP
    projFromFA
    fromString
    determTransitionFun
    fromNFA
    equal
    minus
    determProcessStr
    valid
    transitionFunBackwards
    checkLP
    compare
    renameStates
    sub
    numStates
    validLP
    equivalent
    findLP
    alphabet
    findAcceptingLP
    relationship
    numTransitions
]
@SIGNATURE LIST_AUX "list-aux" [
  @VALS 
    allButLast
    sum
    position
    repeat
    prod
    update
    fromTo
    sub
    splitAt
    min
    max
    allSplittings
    adjacentElts
]
@SIGNATURE TAB "tab" [
  @TYPES 
    @TYPE tab
  @VALS 
    lookup
    toList
    empty
    domain
    fromList
    update
    isEmpty
]
@SIGNATURE PP "pp" [
  @TYPES 
    @TYPE pp
  @VALS 
    block
    toString
    decorate
    fromString
    newline
    empty
    quote
    comma
    fromStringSplitEscape
    colon
    semicolon
]
@SIGNATURE PROG "prog" [
  @TYPES 
    @TYPE cp
    @DATATYPE accept [ Accept RejectWithFalse RejectOtherwise Unknown]
    @DATATYPE run [ Ans Fail Intermed]
    @TYPE prog
    @DATATYPE step [ Value Error Next]
    @DATATYPE const [ True False Nil]
    @DATATYPE oper [ IsNil IsInt IsNeg IsZero IsPos IsSym IsStr IsPair IsLam Plus Minus Compare Fst Snd ConsSym DeconsSym SymListToStr StrToSymList]
    @DATATYPE concr [ Var Const Int Sym Str Pair Calc Cond App Lam LetSimp LetRec]
  @VALS 
    validLeafPath
    output
    toString
    jforlanEdit
    accept
    run
    validPath
    app
    select
    fromConcr
    toRep
    isRep
    toClosed
    update
    fromClosed
    isValue
    input
    free
    numLeaves
    accepted
    fromStr
    toConcr
    height
    maximumLengthPath
    sym
    toPP
    fromString
    lam
    evaluate
    jforlanNew
    letRec
    equal
    step
    str
    fromRep
    pair
    subst
    toStr
    letSimp
    compare
    calc
    const
    jforlanValidate
    size
    cond
    int
    var
    jforlanPretty
]
@SIGNATURE VAR_SET "var-set" [
  @VALS 
    genUnion
    toPP
    output
    toString
    fromString
    inter
    equal
    minus
    fromList
    map
    subset
    memb
    compare
    union
    mapFromList
    genInter
    inputFromLabToks
    input
]
@SIGNATURE LEX "lex" [
  @TYPES 
    @TYPE sym
    @DATATYPE sym_top [ BasicSymTop CompoundSymTop]
    @TYPE basic
    @DATATYPE tok [ Bar Comma Dollar Perc Plus Semicolon Star Tilde OpenPar ClosPar SingArr DoubArr Sym Heading EOF]
  @VALS 
    symToString
    checkInLabToks
    expectedLetterOrDigit
    lexString
    basicToChar
    unexpectedTok
    symTopToSym
    expectedLetter
    expectedDigit
    lexFile
    error
    sizeSym
    equalTok
    symToPP
    errorNotEOFTerminated
    expectedTok
    charToBasic
    compareSym
    symToSymTop
]
@SIGNATURE RFA "rfa" [
  @TYPES 
    @TYPE rfa
    @TYPE concr
  @VALS 
    transitions
    output
    faToRegPerms
    toString
    renameStatesCanonically
    toReg
    jforlanEdit
    standard
    standardize
    fromConcr
    startState
    acceptingStates
    faToRegPermsTrace
    faToReg
    input
    states
    toConcr
    toPP
    fromString
    jforlanNew
    eliminateState
    equal
    valid
    checkLP
    compare
    jforlanValidate
    numStates
    sub
    renameStates
    validLP
    fromFA
    alphabet
    numTransitions
    jforlanPretty
]
@SIGNATURE NFA "nfa" [
  @TYPES 
    @TYPE nfa
  @VALS 
    isomorphic
    emptyStr
    findIsomorphism
    transitions
    findIsomorphismOpt
    output
    toString
    renameStatesCanonically
    isomorphism
    inter
    renameAlphabet
    processStr
    transitionFun
    startState
    acceptingStates
    reachify
    reachified
    emptySet
    injToFA
    projFromEFA
    genInter
    injToEFA
    findAcceptingLPOpt
    input
    findLPOpt
    states
    accepted
    toPP
    projFromFA
    fromString
    prefix
    simplify
    simplified
    equal
    valid
    transitionFunBackwards
    checkLP
    compare
    fromSym
    renameStates
    sub
    numStates
    validLP
    findLP
    fromEFA
    alphabet
    findAcceptingLP
    numTransitions
]
@SIGNATURE SYSTEM "system" [
  @VALS 
    runJForlan
    makeTempFile
]
@STRUCTURE StrSet "str-set" STR_SET
@STRUCTURE LP "lp" LP
@STRUCTURE Set "set" SET
@STRUCTURE Sym "sym" SYM
@STRUCTURE EFA "efa" EFA
@STRUCTURE SymRel "sym-rel" SYM_REL
@STRUCTURE Prog "prog" PROG
@STRUCTURE Str "str" STR
@STRUCTURE TranReg "tran-reg" TRAN_REG
@STRUCTURE Use "use" USE
@STRUCTURE Rel "rel" REL
@STRUCTURE ListAux "list-aux" LIST_AUX
@STRUCTURE Reg "reg" REG
@STRUCTURE StringAux "string-aux" STRING_AUX
@STRUCTURE Version "version" VERSION
@STRUCTURE Debug "debug" DEBUG
@STRUCTURE System "system" SYSTEM
@STRUCTURE Var "var" VAR
@STRUCTURE PT "pt" PT
@STRUCTURE TranRegSet "tran-reg-set" TRAN_REG_SET
@STRUCTURE VarSet "var-set" VAR_SET
@STRUCTURE FA "fa" FA
@STRUCTURE DFA "dfa" DFA
@STRUCTURE SymSet "sym-set" SYM_SET
@STRUCTURE Tab "tab" TAB
@STRUCTURE PP "pp" PP
@STRUCTURE Sort "sort" SORT
@STRUCTURE Params "params" PARAMS
@STRUCTURE Prod "prod" PROD
@STRUCTURE Messages "messages" MESSAGES
@STRUCTURE Lex "lex" LEX
@STRUCTURE Tran "tran" TRAN
@STRUCTURE RFA "rfa" RFA
@STRUCTURE TranSet "tran-set" TRAN_SET
@STRUCTURE NFA "nfa" NFA
@STRUCTURE ProdSet "prod-set" PROD_SET
@STRUCTURE Gram "gram" GRAM
