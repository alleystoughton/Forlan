<!-- sym-set.mldoc -->

<!-- Copyright (C) 2001-2012 Alley Stoughton

     The file is part of the Forlan toolset for experimenting with
     formal languages.  See the file COPYING.txt for copying and
     usage restrictions. -->

<!DOCTYPE ML-DOC SYSTEM>

<TITLE>The SymSet Module</TITLE>

<COPYRIGHT OWNER="Alley Stoughton" YEAR=2012>

<INTERFACE>
<HEAD>The <CD/SymSet/ Module</HEAD>

<PP>This module provides operations on finite sets of Forlan symbols,
i.e., values of type
<CD><STRREF/Sym/.<TYREF STRID="Sym"/sym/
<STRREF/Set/.<TYREF STRID="Set"/set/</CD> that are <EM>standard</EM>
in the sense that they are compatible with
<STRREF/Sym/.<VALREF STRID="Sym"/compare/. All values of type
<CD>Sym.sym Set.set</CD> will implicitly be assumed/required to be
standard.</PP>

<STRUCTURE STRID="SymSet">
<OPAQUE>
<SIGBODY SIGID="SYM_SET" FILE=SYM-SET>

<SPEC>
<VAL>memb<TY>Sym.sym * Sym.sym Set.set -> bool</TY></VAL>
<COMMENT>
<PROTOTY>
memb(<ARG/a/, <ARG/bs/)
</PROTOTY>
<PP>tests whether <CD><ARG/a/</CD> is a member of <CD><ARG/bs/</CD>.
</PP>
</COMMENT>
</SPEC>

<SPEC>
<VAL>fromList<TY>Sym.sym list -> Sym.sym Set.set</TY></VAL>
<COMMENT>
<PROTOTY>
fromList <ARG/bs/
</PROTOTY>
<PP>returns the set whose elements are the elements
of <CD><ARG/bs/</CD>.</PP>
</COMMENT>
</SPEC>

<SPEC>
<VAL>compare<TY>Sym.sym Set.set Sort.total_ordering</TY></VAL>
<COMMENT>
<PROTOTY>
compare
</PROTOTY>
<PP>is
<CD><STRREF TOPID/Set/.<VALREF STRID="Set"/compare/
<STRREF TOPID/Sym/.<VALREF STRID="Sym"/compare/</CD>.
</PP>
</COMMENT>
</SPEC>

<SPEC>
<VAL>subset<TY>Sym.sym Set.set * Sym.sym Set.set -> bool</TY></VAL>
<COMMENT>
<PROTOTY>
subset(<ARG/bs/, <ARG/cs/)
</PROTOTY>
<PP>tests whether <CD><ARG/bs/</CD> is a subset of <CD><ARG/cs/</CD>.
</PP>
</COMMENT>
</SPEC>

<SPEC>
<VAL>equal<TY>Sym.sym Set.set * Sym.sym Set.set -> bool</TY></VAL>
<COMMENT>
<PROTOTY>
equal(<ARG/bs/, <ARG/cs/)
</PROTOTY>
<PP>tests whether <CD><ARG/bs/</CD> is equal to <CD><ARG/cs/</CD>.
</PP>
</COMMENT>
</SPEC>

<SPEC>
<VAL>map<TY>('a -> Sym.sym) -> 'a Set.set -> Sym.sym Set.set</TY></VAL>
<COMMENT>
<PROTOTY>
map <ARG/f/ <ARG/xs/
</PROTOTY>
<PP>If <CD><ARG/xs/</CD> is compatible with a value <CD><ARG/cmp/</CD>
of type <CD><ARG/'a/ Sort.total_ordering</CD>, then <CD>map</CD>
returns the set of all symbols <CD><ARG/f/ <ARG/x/</CD> such
that <CD><ARG/x/</CD> is a member of <CD><ARG/xs/</CD>.</PP>
</COMMENT>
</SPEC>

<SPEC>
<VAL>mapFromList<TY>('a -> Sym.sym) -> 'a list -> Sym.sym Set.set</TY></VAL>
<COMMENT>
<PROTOTY>
mapFromList <ARG/f/ <ARG/xs/
</PROTOTY>
<PP>returns the set of all symbols <CD><ARG/f/ <ARG/x/</CD> such
that <CD><ARG/x/</CD> is a member of <CD><ARG/xs/</CD>.</PP>
</COMMENT>
</SPEC>

<SPEC>
<VAL>union<TY>Sym.sym Set.set * Sym.sym Set.set -> Sym.sym Set.set</TY></VAL>
<COMMENT>
<PROTOTY>
union(<ARG/bs/, <ARG/cs/)
</PROTOTY>
<PP>returns the union of <CD><ARG/bs/</CD> and <CD><ARG/cs/</CD>.</PP>
</COMMENT>
</SPEC>

<SPEC>
<VAL>genUnion<TY>Sym.sym Set.set list -> Sym.sym Set.set</TY></VAL>
<COMMENT>
<PROTOTY>
genUnion <ARG/bss/
</PROTOTY>
<PP>returns the generalized union of <CD><ARG/bss/</CD>.</PP>
</COMMENT>
</SPEC>

<SPEC>
<VAL>inter<TY>Sym.sym Set.set * Sym.sym Set.set -> Sym.sym Set.set</TY></VAL>
<COMMENT>
<PROTOTY>
inter(<ARG/bs/, <ARG/cs/)
</PROTOTY>
<PP>returns the intersection of <CD><ARG/bs/</CD> and <CD><ARG/cs/</CD>.
</PP>
</COMMENT>
</SPEC>

<SPEC>
<VAL>genInter<TY>Sym.sym Set.set list -> Sym.sym Set.set</TY></VAL>
<COMMENT>
<PROTOTY>
genInter <ARG/bss/
</PROTOTY>
<PP>returns the generalized intersection of <CD><ARG/bss/</CD>.  Issues
an error message if <CD><ARG/bss/</CD> is empty.
</PP>
</COMMENT>
</SPEC>

<SPEC>
<VAL>minus<TY>Sym.sym Set.set * Sym.sym Set.set -> Sym.sym Set.set</TY></VAL>
<COMMENT>
<PROTOTY>
minus(<ARG/bs/, <ARG/cs/)
</PROTOTY>
<PP>returns the difference of <CD><ARG/bs/</CD> and <CD><ARG/cs/</CD>.
</PP>
</COMMENT>
</SPEC>

<SPEC>
<VAL>inputFromLabToks
<TY>(int * Lex.tok)list -> Sym.sym Set.set * (int * Lex.tok)list</TY>
</VAL>
<COMMENT>
<PROTOTY>
inputFromLabToks <ARG/lts/
</PROTOTY>
<PP>tries to input a set of symbols from <CD><ARG/lts/</CD>, consuming
as much of <CD><ARG/lts/</CD> as possible, and returning the pair of
the set of symbols and the rest of <CD><ARG/lts/</CD>. Issues an error
message if it fails. Will only return the empty set
if <CD><ARG/lts/</CD> doesn't begin with a symbol. If, after reading a
symbol, the next element of the labeled token list is <CD>","</CD>
(<CD><STRREF TOPID/Lex/.<CONREF STRID="Lex"/Comma/</CD>),
then <CD>inputFromLabToks</CD> insists on reading another symbol, even
if this results in failure.</PP>
</COMMENT>
</SPEC>

<SPEC>
<VAL>fromString<TY>string -> Sym.sym Set.set</TY></VAL>
<COMMENT>
<PROTOTY>
fromString <ARG/s/
</PROTOTY>
<PP>inputs a set of symbols from <CD><ARG/s/</CD>.</PP>
</COMMENT>
</SPEC>

<SPEC>
<VAL>input<TY>string -> Sym.sym Set.set</TY></VAL>
<COMMENT>
<PROTOTY>
input <ARG/fil/
</PROTOTY>
<PP>inputs a set of symbols from the file <CD><ARG/fil/</CD>.</PP>
</COMMENT>
</SPEC>

<SPEC>
<VAL>toPP<TY>Sym.sym Set.set -> PP.pp</TY></VAL>
<COMMENT>
<PROTOTY>
toPP <ARG/bs/
</PROTOTY>
<PP>returns a pretty-printing expression for <CD><ARG/bs/</CD>.</PP>
</COMMENT>
</SPEC>

<SPEC>
<VAL>toString<TY>Sym.sym Set.set -> string</TY></VAL>
<COMMENT>
<PROTOTY>
toString <ARG/bs/
</PROTOTY>
<PP>pretty-prints <CD><ARG/bs/</CD> to a string.</PP>
</COMMENT>
</SPEC>

<SPEC>
<VAL>output<TY>string * Sym.sym Set.set -> unit</TY></VAL>
<COMMENT>
<PROTOTY>
output(<ARG/fil/, <ARG/bs/)
</PROTOTY>
<PP>pretty-prints <CD><ARG/bs/</CD> to file <CD><ARG/fil/</CD>.</PP>
</COMMENT>
</SPEC>

</SIGBODY>
</STRUCTURE>
</INTERFACE>
