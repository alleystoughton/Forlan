<!-- tran-set.mldoc -->

<!-- Copyright (C) 2012 Alley Stoughton

     The file is part of the Forlan toolset for experimenting with
     formal languages.  See the file COPYING.txt for copying and
     usage restrictions. -->

<!DOCTYPE ML-DOC SYSTEM>

<TITLE>The TranSet Module</TITLE>

<COPYRIGHT OWNER="Alley Stoughton" YEAR=2012>

<INTERFACE>
<HEAD>The <CD/TranSet/ Module</HEAD>

<PP>This module provides operations on finite sets of transitions,
i.e., values of type
<CD><STRREF/Tran/.<TYREF STRID="Tran"/tran/
<STRREF/Set/.<TYREF STRID="Set"/set/</CD> that are <EM>standard</EM>
in the sense that they are compatible with
<STRREF/Tran/.<VALREF STRID="Tran"/compare/. All values of type
<CD>Tran.tran Set.set</CD> will implicitly be assumed/required to be
standard.</PP>

<STRUCTURE STRID="TranSet">
<OPAQUE>
<SIGBODY SIGID="TRAN_SET" FILE=TRAN-SET>

<SPEC>
<VAL>memb<TY>Tran.tran * Tran.tran Set.set -> bool</TY></VAL>
<COMMENT>
<PROTOTY>
memb(<ARG/tran/, <ARG/trans/)
</PROTOTY>
<PP>tests whether <CD><ARG/tran/</CD> is a member of <CD><ARG/trans/</CD>.
</PP>
</COMMENT>
</SPEC>

<SPEC>
<VAL>fromList<TY>Tran.tran list -> Tran.tran Set.set</TY></VAL>
<COMMENT>
<PROTOTY>
fromList <ARG/trans/
</PROTOTY>
<PP>returns the set whose elements are the elements
of <CD><ARG/trans/</CD>.</PP>
</COMMENT>
</SPEC>

<SPEC>
<VAL>compare<TY>Tran.tran Set.set Sort.total_ordering</TY></VAL>
<COMMENT>
<PROTOTY>
compare
</PROTOTY>
<PP>is
<CD><STRREF TOPID/Set/.<VALREF STRID="Set"/compare/
<STRREF TOPID/Tran/.<VALREF STRID="Tran"/compare/</CD>.
</PP>
</COMMENT>
</SPEC>

<SPEC>
<VAL>subset<TY>Tran.tran Set.set * Tran.tran Set.set -> bool</TY></VAL>
<COMMENT>
<PROTOTY>
subset(<ARG/tran1s/, <ARG/tran2s/)
</PROTOTY>
<PP>tests whether <CD><ARG/tran1s/</CD> is a subset of <CD><ARG/tran2s/</CD>.
</PP>
</COMMENT>
</SPEC>

<SPEC>
<VAL>equal<TY>Tran.tran Set.set * Tran.tran Set.set -> bool</TY></VAL>
<COMMENT>
<PROTOTY>
equal(<ARG/tran1s/, <ARG/tran2s/)
</PROTOTY>
<PP>tests whether <CD><ARG/tran1s/</CD> is equal to <CD><ARG/tran2s/</CD>.
</PP>
</COMMENT>
</SPEC>

<SPEC>
<VAL>map<TY>('a -> Tran.tran) -> 'a Set.set -> Tran.tran Set.set</TY></VAL>
<COMMENT>
<PROTOTY>
map <ARG/f/ <ARG/xs/
</PROTOTY>
<PP>If <CD><ARG/xs/</CD> is compatible with a value <CD><ARG/cmp/</CD>
of type <CD><ARG/'a/ Sort.total_ordering</CD>, then <CD>map</CD>
returns the set of all transitions <CD><ARG/f/ <ARG/x/</CD> such
that <CD><ARG/x/</CD> is a member of <CD><ARG/xs/</CD>.</PP>
</COMMENT>
</SPEC>

<SPEC>
<VAL>mapFromList<TY>('a -> Tran.tran) -> 'a list -> Tran.tran Set.set</TY></VAL>
<COMMENT>
<PROTOTY>
mapFromList <ARG/f/ <ARG/xs/
</PROTOTY>
<PP>returns the set of all transitions <CD><ARG/f/ <ARG/x/</CD> such
that <CD><ARG/x/</CD> is a member of <CD><ARG/xs/</CD>.</PP>
</COMMENT>
</SPEC>

<SPEC>
<VAL>union<TY>Tran.tran Set.set * Tran.tran Set.set -> Tran.tran Set.set</TY></VAL>
<COMMENT>
<PROTOTY>
union(<ARG/tran1s/, <ARG/tran2s/)
</PROTOTY>
<PP>returns the union of <CD><ARG/tran1s/</CD> and <CD><ARG/tran2s/</CD>.</PP>
</COMMENT>
</SPEC>

<SPEC>
<VAL>genUnion<TY>Tran.tran Set.set list -> Tran.tran Set.set</TY></VAL>
<COMMENT>
<PROTOTY>
genUnion <ARG/transs/
</PROTOTY>
<PP>returns the generalized union of <CD><ARG/transs/</CD>.</PP>
</COMMENT>
</SPEC>

<SPEC>
<VAL>inter<TY>Tran.tran Set.set * Tran.tran Set.set -> Tran.tran Set.set</TY></VAL>
<COMMENT>
<PROTOTY>
inter(<ARG/tran1s/, <ARG/tran2s/)
</PROTOTY>
<PP>returns the intersection of <CD><ARG/tran1s/</CD> and <CD><ARG/tran2s/</CD>.
</PP>
</COMMENT>
</SPEC>

<SPEC>
<VAL>genInter<TY>Tran.tran Set.set list -> Tran.tran Set.set</TY></VAL>
<COMMENT>
<PROTOTY>
genInter <ARG/transs/
</PROTOTY>
<PP>returns the generalized intersection of <CD><ARG/transs/</CD>.  Issues
an error message if <CD><ARG/transs/</CD> is empty.
</PP>
</COMMENT>
</SPEC>

<SPEC>
<VAL>minus<TY>Tran.tran Set.set * Tran.tran Set.set -> Tran.tran Set.set</TY></VAL>
<COMMENT>
<PROTOTY>
minus(<ARG/tran1s/, <ARG/tran2s/)
</PROTOTY>
<PP>returns the difference of <CD><ARG/tran1s/</CD> and <CD><ARG/tran2s/</CD>.
</PP>
</COMMENT>
</SPEC>

<SPEC>
<VAL>inputFromLabToks
<TY>(int * Lex.tok)list -> Tran.tran Set.set * (int * Lex.tok)list</TY>
</VAL>
<COMMENT>
<PROTOTY>
inputFromLabToks <ARG/lts/
</PROTOTY>
<PP>tries to input a set of transitions from <CD><ARG/lts/</CD>,
consuming as much of <CD><ARG/lts/</CD> as possible, and returning the
pair of the set of transitions and the rest of <CD><ARG/lts/</CD>.
Issues an error message if it fails. Will only return the empty set
if <CD><ARG/lts/</CD> doesn't begin with a symbol. If, after reading a
transition, the next element of the labeled token list is <CD>","</CD>
(<CD><STRREF TOPID/Lex/.<CONREF STRID="Lex"/Comma/</CD>),
then <CD>inputFromLabToks</CD> insists on reading another transition, even
if this results in failure.</PP>
</COMMENT>
</SPEC>

<SPEC>
<VAL>fromString<TY>string -> Tran.tran Set.set</TY></VAL>
<COMMENT>
<PROTOTY>
fromString <ARG/s/
</PROTOTY>
<PP>inputs a set of transitions from <CD><ARG/s/</CD>.</PP>
</COMMENT>
</SPEC>

<SPEC>
<VAL>input<TY>string -> Tran.tran Set.set</TY></VAL>
<COMMENT>
<PROTOTY>
input <ARG/fil/
</PROTOTY>
<PP>inputs a set of transitions from the file <CD><ARG/fil/</CD>.</PP>
</COMMENT>
</SPEC>

<SPEC>
<VAL>toPP<TY>Tran.tran Set.set -> PP.pp</TY></VAL>
<COMMENT>
<PROTOTY>
toPP <ARG/trans/
</PROTOTY>
<PP>returns a pretty-printing expression for <CD><ARG/trans/</CD>.</PP>
</COMMENT>
</SPEC>

<SPEC>
<VAL>toString<TY>Tran.tran Set.set -> string</TY></VAL>
<COMMENT>
<PROTOTY>
toString <ARG/trans/
</PROTOTY>
<PP>pretty-prints <CD><ARG/trans/</CD> to a string.</PP>
</COMMENT>
</SPEC>

<SPEC>
<VAL>output<TY>string * Tran.tran Set.set -> unit</TY></VAL>
<COMMENT>
<PROTOTY>
output(<ARG/fil/, <ARG/trans/)
</PROTOTY>
<PP>pretty-prints <CD><ARG/trans/</CD> to file <CD><ARG/fil/</CD>.</PP>
</COMMENT>
</SPEC>

</SIGBODY>
</STRUCTURE>
</INTERFACE>
