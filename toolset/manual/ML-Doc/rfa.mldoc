<!-- rfa.mldoc -->

<!-- Copyright (C) 2001-2012 Alley Stoughton

     The file is part of the Forlan toolset for experimenting with
     formal languages.  See the file COPYING.txt for copying and
     usage restrictions. -->

<!DOCTYPE ML-DOC SYSTEM>

<TITLE>The RFA Module</TITLE>

<COPYRIGHT OWNER="Alley Stoughton" YEAR=2012>

<INTERFACE>
<HEAD>The <CD/RFA/ Module</HEAD>

<PP>This module defines the abstract type of regular expression finite
automata (RFAs).</PP>

<STRUCTURE STRID="RFA">
<OPAQUE>
<SIGBODY SIGID="RFA" FILE=RFA>

<SPEC>
<TYPE><ID>concr
<TY>{stats : Sym.sym Set.set, start : Sym.sym, accepting : Sym.sym Set.set,
trans : TranReg.tran_reg Set.set}</TY>
</TYPE>
<COMMENT>
<PP>The concrete type of <EM>pre-regular expression finite
automata</EM>, records consisting of a finite set <CD>stats</CD>
("states") of symbols, a symbol <CD>start</CD> ("start state"),
a finite set <CD>accepting</CD> ("accepting states") of symbols,
and a finite set <CD>trans</CD> ("transitions") of RFA transitions.
</PP>
</COMMENT>
</SPEC>

<SPEC>
<TYPE><ID>rfa</ID></TYPE>
<COMMENT>
<PP>The abstract type of regular expression finite automata,
consisting of those pre-regular expression finite automata
<CD><ARG/concr/</CD> of type <CD>concr</CD> such that:
<ITEMIZE>
<ITEM>
<CD>#start <ARG/concr/</CD> is an element of <CD>#stats <ARG/concr/</CD>;
</ITEM>

<ITEM>
<CD>#accepting <ARG/concr/</CD> is a subset of
<CD>#stats <ARG/concr/</CD>;
</ITEM>

<ITEM>for all elements <CD>(<ARG/q/, <ARG/reg/, <ARG/r/)</CD> of <CD>#trans
<ARG/concr/</CD>, <CD><ARG/q/</CD> and <CD><ARG/r/</CD> are
elements of <CD>#stats <ARG/concr/</CD>; and</ITEM>

<ITEM>for all elements <CD><ARG/q/</CD> and <CD><ARG/r/</CD> of
<CD>#stats <ARG/concr/</CD>, there is at most one regular expression
<CD><ARG/reg/</CD> such that <CD>(<ARG/q/, <ARG/reg/, <ARG/r/)</CD>
is an element of <CD>#trans <ARG/concr/</CD>.</ITEM>
</ITEMIZE>
We say that <CD><ARG/concr/</CD> is <EM>valid</EM> iff <CD><ARG/concr/</CD>
satisfies the above conditions.
</PP>
</COMMENT>
</SPEC>

<SPEC>
<VAL>valid<TY>concr -> bool</TY></VAL>
<COMMENT>
<PROTOTY>
valid <ARG/concr/
</PROTOTY>
<PP>tests whether <CD><ARG/concr/</CD> is valid.</PP>
</COMMENT>
</SPEC>

<SPEC>
<VAL>fromConcr<TY>concr -> rfa</TY></VAL>
<COMMENT>
<PROTOTY>
fromConcr <ARG/concr/
</PROTOTY>
<PP>returns <CD><ARG/concr/</CD>.  Issues an error message
if <CD><ARG/concr/</CD> is not valid.</PP>
</COMMENT>
</SPEC>

<SPEC>
<VAL>toConcr<TY>rfa -> concr</TY></VAL>
<COMMENT>
<PROTOTY>
toConcr <ARG/rfa/
</PROTOTY>
<PP>returns rfa.</PP>
</COMMENT>
</SPEC>

<SPEC>
<VAL>fromString<TY>string -> rfa</TY></VAL>
<COMMENT>
<PROTOTY>
fromString <ARG/s/
</PROTOTY>
<PP>inputs an RFA from <CD><ARG/s/</CD>.</PP>
</COMMENT>
</SPEC>

<SPEC>
<VAL>input<TY>string -> rfa</TY></VAL>
<COMMENT>
<PROTOTY>
input <ARG/fil/
</PROTOTY>
<PP>inputs an RFA from the file named <CD><ARG/fil/</CD>.</PP>
</COMMENT>
</SPEC>

<SPEC>
<VAL>toPP<TY>rfa -> PP.pp</TY>
<COMMENT>
<PROTOTY>
toPP <ARG/rfa/
</PROTOTY>
<PP>returns a pretty-printing expression for <CD><ARG/rfa/</CD>.
</PP>
</COMMENT>
</SPEC>

<SPEC>
<VAL>toString<TY>rfa -> string</TY></VAL>
<COMMENT>
<PROTOTY>
toString <ARG/rfa/
</PROTOTY>
<PP>pretty-prints <CD><ARG/rfa/</CD> to a string.</PP>
</COMMENT>
</SPEC>

<SPEC>
<VAL>output<TY>string * rfa -> unit</TY></VAL>
<COMMENT>
<PROTOTY>
output(<ARG/fil/, <ARG/rfa/)
</PROTOTY>
<PP>pretty-prints <CD><ARG/rfa/</CD> to the file <CD><ARG/fil/</CD>.</PP>
</COMMENT>
</SPEC>

<SPEC>
<VAL>states<TY>rfa -> Sym.sym Set.set</TY></VAL>
<COMMENT>
<PROTOTY>
states <ARG/rfa/
</PROTOTY>
<PP>returns the states of <CD><ARG/rfa/</CD>.</PP>
</COMMENT>
</SPEC>

<SPEC>
<VAL>startState<TY>rfa -> Sym.sym</TY></VAL>
<COMMENT>
<PROTOTY>
startState <ARG/rfa/
</PROTOTY>
<PP>returns the start state of <CD><ARG/rfa/</CD>.</PP>
</COMMENT>
</SPEC>

<SPEC>
<VAL>acceptingStates<TY>rfa -> Sym.sym Set.set</TY></VAL>
<COMMENT>
<PROTOTY>
acceptingStates <ARG/rfa/
</PROTOTY>
<PP>returns the accepting states of <CD><ARG/rfa/</CD>.</PP>
</COMMENT>
</SPEC>

<SPEC>
<VAL>transitions<TY>rfa -> TranReg.tran_reg Set.set</TY></VAL>
<COMMENT>
<PROTOTY>
transitions <ARG/rfa/
</PROTOTY>
<PP>returns the transitions of <CD><ARG/rfa/</CD>.</PP>
</COMMENT>
</SPEC>

<SPEC>
<VAL>compare<TY>rfa Sort.total_ordering</TY></VAL>
<COMMENT>
<PROTOTY>
compare(<ARG/rfa1/, <ARG/rfa2/)
</PROTOTY>
<PP>returns
<CODE>
  case SymSet.compare(states <ARG/rfa1/, states <ARG/rfa2/) of
       LESS    => LESS
     | EQUAL   =>
         (case Sym.compare(startState <ARG/rfa1/, startState <ARG/rfa2/) of
               LESS    => LESS
             | EQUAL   =>
                 (case SymSet.compare(acceptingStates <ARG/rfa1/, acceptingStates <ARG/rfa2/) of
                       LESS    => LESS
                     | EQUAL   =>
                         TranRegSet.compare
                         (transitions <ARG/rfa1/, transitions <ARG/rfa2/)
                     | GREATER => GREATER)
             | GREATER => GREATER)
     | GREATER => GREATER
</CODE>
</PP>
</COMMENT>
</SPEC>

<SPEC>
<VAL>equal<TY>rfa * rfa -> bool</TY></VAL>
<COMMENT>
<PROTOTY>
equal(<ARG/rfa1/, <ARG/rfa2/)
</PROTOTY>
<PP>tests whether <CD><ARG/rfa1/</CD> and <CD><ARG/rfa2/</CD> are
equal.</PP>
</COMMENT>
</SPEC>

<SPEC>
<VAL>numStates<TY>rfa -> int</TY></VAL>
<COMMENT>
<PROTOTY>
numStates <ARG/rfa/
</PROTOTY>
<PP>returns the number of states of <CD><ARG/rfa/</CD>.</PP>
</COMMENT>
</SPEC>

<SPEC>
<VAL>numTransitions<TY>rfa -> int</TY></VAL>
<COMMENT>
<PROTOTY>
numTransitions <ARG/rfa/
</PROTOTY>
<PP>returns the number of transitions of <CD><ARG/rfa/</CD>.</PP>
</COMMENT>
</SPEC>

<SPEC>
<VAL>alphabet<TY>rfa -> Sym.sym Set.set</TY></VAL>
<COMMENT>
<PROTOTY>
alphabet <ARG/rfa/
</PROTOTY>
<PP>returns the alphabet of <CD><ARG/rfa/</CD>.</PP>
</COMMENT>
</SPEC>

<SPEC>
<VAL>sub<TY>rfa * rfa -> bool</TY></VAL>
<COMMENT>
<PROTOTY>
sub(<ARG/rfa1/, <ARG/rfa2/)
</PROTOTY>
<PP>tests whether <CD><ARG/rfa1/</CD> is a sub-RFA of
<CD><ARG/rfa2/</CD>.</PP>
</COMMENT>
</SPEC>

<SPEC>
<VAL>renameStates<TY>rfa * SymRel.sym_rel -> rfa</TY></VAL>
<COMMENT>
<PROTOTY>
renameStates(<ARG/rfa/, <ARG/rel/)
</PROTOTY>
<PP>renames the states of <CD><ARG/rfa/</CD> using the
bijection <CD><ARG/rel/</CD>.  Issues an error message if
<CD><ARG/rel/</CD> is not a bijection from the states of <CD><ARG/rfa/</CD>
to some set.</PP>
</COMMENT>
</SPEC>

<SPEC>
<VAL>renameStatesCanonically<TY>rfa -> rfa</TY></VAL>
<COMMENT>
<PROTOTY>
renameStatesCanonically <ARG/rfa/
</PROTOTY>
<PP>canonically renames the states of <CD><ARG/rfa/</CD>.</PP>
</COMMENT>
</SPEC>

<SPEC>
<VAL>checkLP<TY>(Str.str * Reg.reg -> bool) * rfa -> LP.lp -> unit</TY></VAL>
<COMMENT>
<PROTOTY>
checkLP (<ARG/memb/, <ARG/rfa/) <ARG/lp/
</PROTOTY>
<PP>checks whether <CD><ARG/lp/</CD> is valid for <CD><ARG/rfa/</CD>,
using <CD><ARG/memb/</CD> for testing whether the strings of
<CD><ARG/lp/</CD> are generated by regular expressions of <CD><ARG/rfa/</CD>.
<CD>checkLP</CD> silently returns <CD>()</CD>, if <CD><ARG/lp/</CD> is valid,
and explains why it isn't valid, if it's not valid.</PP>
</COMMENT>
</SPEC>

<SPEC>
<VAL>validLP<TY>(Str.str * Reg.reg -> bool) * rfa -> LP.lp -> bool</TY></VAL>
<COMMENT>
<PROTOTY>
checkLP (<ARG/memb/, <ARG/rfa/) <ARG/lp/
</PROTOTY>
<PP>tests whether <CD><ARG/lp/</CD> is valid for <CD><ARG/rfa/</CD>,
using <CD><ARG/memb/</CD> for testing whether the strings of
<CD><ARG/lp/</CD> are generated by regular expressions of <CD><ARG/rfa/</CD>.
</PP>
</COMMENT>
</SPEC>

<SPEC>
<VAL>standard<TY>rfa -> bool</TY></VAL>
<COMMENT>
<PROTOTY>
standard <ARG/rfa/
</PROTOTY>
<PP>tests whether <CD><ARG/rfa/</CD> is standard.</PP>
</COMMENT>
</SPEC>

<SPEC>
<VAL>standardize<TY>rfa -> rfa</TY></VAL>
<COMMENT>
<PROTOTY>
standardize <ARG/rfa/
</PROTOTY>
<PP>standardizes <CD><ARG/rfa/</CD>.</PP>
</COMMENT>
</SPEC>

<SPEC>
<VAL>fromFA<TY>(Reg.reg -> Reg.reg) -> FA.fa -> rfa</TY></VAL>
<COMMENT>
<PROTOTY>
fromFA <ARG/simp/ <ARG/fa/
</PROTOTY>
<PP>Converts <CD><ARG/fa/</CD> to an RFA, using <CD><ARG/simp/</CD> to
simplify the regular expressions of transitions.</PP>
</COMMENT>
</SPEC>

<SPEC>
<VAL>eliminateState<TY>(Reg.reg -> Reg.reg) -> rfa * Sym.sym -> rfa</TY></VAL>
<COMMENT>
<PROTOTY>
eliminateState <ARG/simp/ (<ARG/rfa/, <ARG/q/)
</PROTOTY>
<PP>eliminates the state <CD><ARG/q/</CD> from <CD><ARG/rfa/</CD>, using
<CD><ARG/simp/</CD> for regular expression simplification.
Issues an error message if <CD><ARG/q/</CD> is not a state of
<CD><ARG/rfa/</CD>, <CD><ARG/q/</CD> is the start state of
<CD><ARG/rfa/</CD>, or <CD><ARG/q/</CD> is one of the accepting states
of <CD><ARG/rfa/</CD>.
</PP>
</COMMENT>
</SPEC>

<SPEC>
<VAL>toReg<TY>(Reg.reg -> Reg.reg) -> rfa -> Reg.reg</TY></VAL>
<COMMENT>
<PROTOTY>
toReg <ARG/simp/ <ARG/rfa/
</PROTOTY>
<PP>converts the standardization of <CD><ARG/rfa/</CD> to a regular
expression by the state elimination algorithm, using <CD><ARG/simp/</CD>
for regular expression simplification.</PP>
</COMMENT>
</SPEC>

<SPEC>
<VAL>faToReg<TY>(Reg.reg -> Reg.reg) -> FA.fa -> Reg.reg</TY></VAL>
<COMMENT>
<PROTOTY>
faToReg <ARG/simp/ <ARG/fa/
</PROTOTY>
<PP>converts the standardization of <CD>fromReg <ARG/simp/ <ARG/fa/</CD>
to a regular expression by the state elimination algorithm, using
<CD><ARG/simp/</CD> for regular expression simplification.</PP>
</COMMENT>
</SPEC>

<SPEC>
<VAL>faToRegPerms
<TY>int option * (Reg.reg -> Reg.reg) -> FA.fa -> Reg.reg</TY>
</VAL>
<COMMENT>
<PROTOTY>
faToRegPerms (NONE, <ARG/simp/) <ARG/fa/
</PROTOTY>
<PP>works through all the bijections (permutations) <CD><ARG/rel/</CD> on
the states of <CD><ARG/fa/</CD>, evaluating
<CD>faToReg <ARG/simp/
(<STRREF TOPID/FA/.<VALREF STRID="FA"/renameStates/(<ARG/fa/, <ARG/rel/))</CD>,
and selecting the simplest answer
(judged using <CD><STRREF TOPID/Reg/.<VALREF STRID="Reg"/compareComplexityTotal/</CD>).
</PP>

<PROTOTY>
faToRegPerms (SOME <ARG/n/, <ARG/simp/) <ARG/fa/
</PROTOTY>
<PP>works through the first <CD><ARG/n/</CD> bijections (ordered
by <CD><STRREF TOPID/SymRel/.<VALREF STRID="SymRel"/compare/</CD>)
<CD><ARG/rel/</CD> on the states of <CD><ARG/fa/</CD>,
evaluating
<CD>faToReg <ARG/simp/
(<STRREF TOPID/FA/.<VALREF STRID="FA"/renameStates/(<ARG/fa/, <ARG/rel/))</CD>,
and selecting the simplest answer
(judged using <CD><STRREF TOPID/Reg/.<VALREF STRID="Reg"/compareComplexityTotal/</CD>).
Issues an error message if <CD><ARG/n/</CD> is negative.
</PP>
</COMMENT>
</SPEC>

<SPEC>
<VAL>faToRegPermsTrace
<TY>int option * (Reg.reg -> Reg.reg) -> FA.fa -> Reg.reg</TY>
</VAL>
<COMMENT>
<PP>is like <CD>faToRegPerms</CD>, but issues tracing messages,
explaining its operation.</PP>
</COMMENT>
</SPEC>

<SPEC>
<VAL>jforlanNew<TY>unit -> rfa</TY></VAL>
<COMMENT>
<PROTOTY>
jforlanNew()
</PROTOTY>
<PP>invokes JForlan, and returns the RFA that the user creates
and commits.  Issues an error message if the user aborts, instead.</PP>
</COMMENT>
</SPEC>

<SPEC>
<VAL>jforlanEdit<TY>rfa -> rfa</TY></VAL>
<COMMENT>
<PROTOTY>
jforlanEdit <ARG/rfa/
</PROTOTY>
<PP>invokes JForlan, letting the user edit <CD><ARG/rfa/</CD>, and
returning the resulting RFA that the user commits.  Issues an
error message if the user aborts, instead.</PP>
</COMMENT>
</SPEC>

<SPEC>
<VAL>jforlanValidate<TY>string -> unit</TY></VAL>
<COMMENT>
<PROTOTY>
jforlanValidate
</PROTOTY>
<PP>is a low-level function used by JForlan.  See the code for
more information.</PP>
</COMMENT>
</SPEC>

<SPEC>
<VAL>jforlanPretty<TY>string -> unit</TY></VAL>
<COMMENT>
<PROTOTY>
jforlanPretty
</PROTOTY>
<PP>is a low-level function used by JForlan.  See the code for
more information.</PP>
</COMMENT>
</SPEC>

</SIGBODY>
</STRUCTURE>
</INTERFACE>
