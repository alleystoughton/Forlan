add transitive closure, etc., as exercises of 1.3

add lexicographic total orders for tuple and lists (cf. well-founded relations)

lemma: (x^i)^j = x^(ij).  Put right after x^{i+j} = x^i x^j.
lemma: |x^n| = |x|n

In 2.1 note that 0120 is ambiguous, but harmlessly so
make alphabet a function from Lan to Alp
Say avoid xyz as well as abc in examples....

mention as in Section 2.3: one can use as to give a name to both the whole
and parts.

talk more about functions as algorithms
myor and myand as shortcuts in algorithms
(Reg x Reg -> Reg) -> ... as an algorithm in locallySimplify/globallySimplify

In 3.3, say what <simp is (<=simp but not >=simp; so strictly simpler)

In 3.11, make proof that DFA is correct show iff for all states; this means
showing properties disjoint.

thinking about removing some uses of ... e.g., in definition of yield in
Section 4.1, and definition of label of labeled path, and pumping lemma
for regular languages.  Not clear if goal should be to get rid of all of
them.  Having concat in List Str -> Str will help for yield.  This is
List.concat in SML.

in Section 4.1 talk about how parse trees can be put together, and how
we can replace a leaf by a parse tree; special case of tree stuff.

Say what unit and %-productions are in Section 4.1.
